(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{496:function(t,s,e){"use strict";e.r(s);var a=e(14),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"systemd-应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#systemd-应用"}},[t._v("#")]),t._v(" Systemd 应用")]),t._v(" "),e("blockquote",[e("p",[t._v("搬运自："),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Systemd 入门教程：命令篇"),e("OutboundLink")],1),t._v("、"),e("RouterLink",{attrs:{to:"hhttp://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html"}},[t._v("Systemd 入门教程：实战篇")])],1)]),t._v(" "),e("p",[t._v("Systemd 是 Linux 系统工具，用来启动"),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("守护进程"),e("OutboundLink")],1),t._v("，已成为大多数发行版的标准配置。")]),t._v(" "),e("p",[t._v("本文介绍它的基本用法，分为上下两篇。今天介绍它的主要命令，"),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("下一篇"),e("OutboundLink")],1),t._v("介绍如何用于实战。")]),t._v(" "),e("h2",{attrs:{id:"_1-由来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-由来"}},[t._v("#")]),t._v(" 1. 由来")]),t._v(" "),e("p",[t._v("历史上，"),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 的启动"),e("OutboundLink")],1),t._v("一直采用"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Init",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("init")]),e("OutboundLink")],1),t._v("进程。")]),t._v(" "),e("p",[t._v("下面的命令用来启动服务。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" /etc/init.d/apache2 start\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" apache2 start\n")])])]),e("p",[t._v("这种方法有两个缺点。")]),t._v(" "),e("p",[t._v("一是启动时间长。"),e("code",[t._v("init")]),t._v("进程是串行启动，只有前一个进程启动完，才会启动下一个进程。")]),t._v(" "),e("p",[t._v("二是启动脚本复杂。"),e("code",[t._v("init")]),t._v("进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种\n情况，这往往使得脚本变得很长。")]),t._v(" "),e("h2",{attrs:{id:"_2-systemd-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-systemd-概述"}},[t._v("#")]),t._v(" 2. Systemd 概述")]),t._v(" "),e("p",[t._v("Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套\n完整的解决方案。")]),t._v(" "),e("p",[t._v("根据 Linux 惯例，字母"),e("code",[t._v("d")]),t._v("是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就\n是它要守护整个系统。")]),t._v(" "),e("p",[t._v("使用了 Systemd，就不需要再用"),e("code",[t._v("init")]),t._v("了。Systemd 取代了"),e("code",[t._v("initd")]),t._v("，成为系统的第一个进\n程（PID 等于 1），其他进程都是它的子进程。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl --version\n")])])]),e("p",[t._v("上面的命令查看 Systemd 的版本。")]),t._v(" "),e("p",[t._v('Systemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很\n多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反"keep\nsimple, keep stupid"\n的'),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2009/06/unix_philosophy.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unix 哲学"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016030703.png",alt:"img"}})]),t._v(" "),e("p",[t._v("（上图为 Systemd 架构图）")]),t._v(" "),e("h2",{attrs:{id:"_3-系统管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-系统管理"}},[t._v("#")]),t._v(" 3. 系统管理")]),t._v(" "),e("p",[t._v("Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。")]),t._v(" "),e("h3",{attrs:{id:"_3-1-systemctl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-systemctl"}},[t._v("#")]),t._v(" 3.1. systemctl")]),t._v(" "),e("p",[e("code",[t._v("systemctl")]),t._v("是 Systemd 的主命令，用于管理系统。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启系统")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reboot")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭系统，切断电源")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl poweroff\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CPU停止工作")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("halt")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂停系统")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("suspend")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让系统进入冬眠状态")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl hibernate\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让系统进入交互式休眠状态")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl hybrid-sleep\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动进入救援状态（单用户状态）")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl rescue\n")])])]),e("h3",{attrs:{id:"_3-2-systemd-analyze"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-systemd-analyze"}},[t._v("#")]),t._v(" 3.2. systemd-analyze")]),t._v(" "),e("p",[e("code",[t._v("systemd-analyze")]),t._v("命令用于查看启动耗时。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看启动耗时")]),t._v("\n$ systemd-analyze\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看每个服务的启动耗时")]),t._v("\n$ systemd-analyze blame\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示瀑布状的启动过程流")]),t._v("\n$ systemd-analyze critical-chain\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示指定服务的启动流")]),t._v("\n$ systemd-analyze critical-chain atd.service\n")])])]),e("h3",{attrs:{id:"_3-3-hostnamectl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-hostnamectl"}},[t._v("#")]),t._v(" 3.3. hostnamectl")]),t._v(" "),e("p",[e("code",[t._v("hostnamectl")]),t._v("命令用于查看当前主机的信息。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示当前主机的信息")]),t._v("\n$ hostnamectl\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置主机名。")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" hostnamectl set-hostname rhel7\n")])])]),e("h3",{attrs:{id:"_3-4-localectl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-localectl"}},[t._v("#")]),t._v(" 3.4. localectl")]),t._v(" "),e("p",[e("code",[t._v("localectl")]),t._v("命令用于查看本地化设置。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地化设置")]),t._v("\n$ localectl\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置本地化参数。")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" localectl set-locale "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("LANG")])]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("en_GB.utf8\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" localectl set-keymap en_GB\n")])])]),e("h3",{attrs:{id:"_3-5-timedatectl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-timedatectl"}},[t._v("#")]),t._v(" 3.5. timedatectl")]),t._v(" "),e("p",[e("code",[t._v("timedatectl")]),t._v("命令用于查看当前时区设置。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前时区设置")]),t._v("\n$ timedatectl\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有可用的时区")]),t._v("\n$ timedatectl list-timezones\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置当前时区")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" timedatectl set-timezone America/New_York\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" timedatectl set-time YYYY-MM-DD\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" timedatectl set-time HH:MM:SS\n")])])]),e("h3",{attrs:{id:"_3-6-loginctl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-loginctl"}},[t._v("#")]),t._v(" 3.6. loginctl")]),t._v(" "),e("p",[e("code",[t._v("loginctl")]),t._v("命令用于查看当前登录的用户。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出当前session")]),t._v("\n$ loginctl list-sessions\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出当前登录用户")]),t._v("\n$ loginctl list-users\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出显示指定用户的信息")]),t._v("\n$ loginctl show-user ruanyf\n")])])]),e("h2",{attrs:{id:"_4-unit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-unit"}},[t._v("#")]),t._v(" 4. Unit")]),t._v(" "),e("h3",{attrs:{id:"_4-1-含义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-含义"}},[t._v("#")]),t._v(" 4.1. 含义")]),t._v(" "),e("p",[t._v("Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。")]),t._v(" "),e("p",[t._v("Unit 一共分成 12 种。")]),t._v(" "),e("ul",[e("li",[t._v("Service unit：系统服务")]),t._v(" "),e("li",[t._v("Target unit：多个 Unit 构成的一个组")]),t._v(" "),e("li",[t._v("Device Unit：硬件设备")]),t._v(" "),e("li",[t._v("Mount Unit：文件系统的挂载点")]),t._v(" "),e("li",[t._v("Automount Unit：自动挂载点")]),t._v(" "),e("li",[t._v("Path Unit：文件或路径")]),t._v(" "),e("li",[t._v("Scope Unit：不是由 Systemd 启动的外部进程")]),t._v(" "),e("li",[t._v("Slice Unit：进程组")]),t._v(" "),e("li",[t._v("Snapshot Unit：Systemd 快照，可以切回某个快照")]),t._v(" "),e("li",[t._v("Socket Unit：进程间通信的 socket")]),t._v(" "),e("li",[t._v("Swap Unit：swap 文件")]),t._v(" "),e("li",[t._v("Timer Unit：定时器")])]),t._v(" "),e("p",[e("code",[t._v("systemctl list-units")]),t._v("命令可以查看当前系统的所有 Unit 。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出正在运行的 Unit")]),t._v("\n$ systemctl list-units\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有Unit，包括没有找到配置文件的或者启动失败的")]),t._v("\n$ systemctl list-units --all\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有没有运行的 Unit")]),t._v("\n$ systemctl list-units --all --state"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("inactive\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有加载失败的 Unit")]),t._v("\n$ systemctl list-units --failed\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有正在运行的、类型为 service 的 Unit")]),t._v("\n$ systemctl list-units --type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("service\n")])])]),e("h3",{attrs:{id:"_4-2-unit-的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-unit-的状态"}},[t._v("#")]),t._v(" 4.2. Unit 的状态")]),t._v(" "),e("p",[e("code",[t._v("systemctl status")]),t._v("命令用于查看系统状态和单个 Unit 的状态。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示系统状态")]),t._v("\n$ systemctl status\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示单个 Unit 的状态")]),t._v("\n$ sysystemctl status bluetooth.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示远程主机的某个 Unit 的状态")]),t._v("\n$ systemctl -H root@rhel7.example.com status httpd.service\n")])])]),e("p",[t._v("除了"),e("code",[t._v("status")]),t._v("命令，"),e("code",[t._v("systemctl")]),t._v("还提供了三个查询状态的简单方法，主要供脚本内部的判\n断语句使用。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个 Unit 是否正在运行")]),t._v("\n$ systemctl is-active application.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个 Unit 是否处于启动失败状态")]),t._v("\n$ systemctl is-failed application.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个 Unit 服务是否建立了启动链接")]),t._v("\n$ systemctl is-enabled application.service\n")])])]),e("h3",{attrs:{id:"_4-3-unit-管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-unit-管理"}},[t._v("#")]),t._v(" 4.3. Unit 管理")]),t._v(" "),e("p",[t._v("对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 立即启动一个服务")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl start apache.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 立即停止一个服务")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl stop apache.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启一个服务")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart apache.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 杀死一个服务的所有子进程")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" apache.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载一个服务的配置文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl reload apache.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重载所有修改过的配置文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个 Unit 的所有底层参数")]),t._v("\n$ systemctl show httpd.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示某个 Unit 的指定属性的值")]),t._v("\n$ systemctl show -p CPUShares httpd.service\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置某个 Unit 的指定属性")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl set-property httpd.service "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("CPUShares")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v("\n")])])]),e("h3",{attrs:{id:"_4-4-依赖关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-依赖关系"}},[t._v("#")]),t._v(" 4.4. 依赖关系")]),t._v(" "),e("p",[t._v("Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启\n动 B。")]),t._v(" "),e("p",[e("code",[t._v("systemctl list-dependencies")]),t._v("命令列出一个 Unit 的所有依赖。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl list-dependencies nginx.service\n")])])]),e("p",[t._v("上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如\n果要展开 Target，就需要使用"),e("code",[t._v("--all")]),t._v("参数。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl list-dependencies --all nginx.service\n")])])]),e("h2",{attrs:{id:"_5-unit-的配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-unit-的配置文件"}},[t._v("#")]),t._v(" 5. Unit 的配置文件")]),t._v(" "),e("h3",{attrs:{id:"_5-1-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-概述"}},[t._v("#")]),t._v(" 5.1. 概述")]),t._v(" "),e("p",[t._v("每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。")]),t._v(" "),e("p",[t._v("Systemd 默认从目录"),e("code",[t._v("/etc/systemd/system/")]),t._v("读取配置文件。但是，里面存放的大部分文件\n都是符号链接，指向目录"),e("code",[t._v("/usr/lib/systemd/system/")]),t._v("，真正的配置文件存放在那个目录。")]),t._v(" "),e("p",[e("code",[t._v("systemctl enable")]),t._v("命令用于在上面两个目录之间，建立符号链接关系。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" clamd@scan.service\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr/lib/systemd/system/clamd@scan.service'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/etc/systemd/system/multi-user.target.wants/clamd@scan.service'")]),t._v("\n")])])]),e("p",[t._v("如果配置文件里面设置了开机启动，"),e("code",[t._v("systemctl enable")]),t._v("命令相当于激活开机启动。")]),t._v(" "),e("p",[t._v("与之对应的，"),e("code",[t._v("systemctl disable")]),t._v("命令用于在两个目录之间，撤销符号链接关系，相当于\n撤销开机启动。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl disable clamd@scan.service\n")])])]),e("p",[t._v("配置文件的后缀名，就是该 Unit 的种类，比如"),e("code",[t._v("sshd.socket")]),t._v("。如果省略，Systemd 默认\n后缀名为"),e("code",[t._v(".service")]),t._v("，所以"),e("code",[t._v("sshd")]),t._v("会被理解成"),e("code",[t._v("sshd.service")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"_5-2-配置文件的状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-配置文件的状态"}},[t._v("#")]),t._v(" 5.2. 配置文件的状态")]),t._v(" "),e("p",[e("code",[t._v("systemctl list-unit-files")]),t._v("命令用于列出所有配置文件。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有配置文件")]),t._v("\n$ systemctl list-unit-files\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出指定类型的配置文件")]),t._v("\n$ systemctl list-unit-files --type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("service\n")])])]),e("p",[t._v("这个命令会输出一个列表。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl list-unit-files\n\nUNIT FILE              STATE\nchronyd.service        enabled\nclamd@.service         static\nclamd@scan.service     disabled\n")])])]),e("p",[t._v("这个列表显示每个配置文件的状态，一共有四种。")]),t._v(" "),e("ul",[e("li",[t._v("enabled：已建立启动链接")]),t._v(" "),e("li",[t._v("disabled：没建立启动链接")]),t._v(" "),e("li",[t._v("static：该配置文件没有"),e("code",[t._v("[Install]")]),t._v("部分（无法执行），只能作为其他配置文件的依赖")]),t._v(" "),e("li",[t._v("masked：该配置文件被禁止建立启动链接")])]),t._v(" "),e("p",[t._v("注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到\n的"),e("code",[t._v("systemctl status")]),t._v("命令。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl status bluetooth.service\n")])])]),e("p",[t._v("一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生\n效。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart httpd.service\n")])])]),e("h3",{attrs:{id:"_5-3-配置文件的格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-配置文件的格式"}},[t._v("#")]),t._v(" 5.3. 配置文件的格式")]),t._v(" "),e("p",[t._v("配置文件就是普通的文本文件，可以用文本编辑器打开。")]),t._v(" "),e("p",[e("code",[t._v("systemctl cat")]),t._v("命令可以查看配置文件的内容。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" atd.service\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Unit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Description")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ATD daemon\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("forking\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ExecStart")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/usr/bin/atd\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Install"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("WantedBy")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("multi-user.target\n")])])]),e("p",[t._v("从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区\n别名，比如"),e("code",[t._v("[Unit]")]),t._v("。注意，配置文件的区块名和字段名，都是大小写敏感的。")]),t._v(" "),e("p",[t._v("每个区块内部是一些等号连接的键值对。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Section"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Directive1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("value\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Directive2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("value\n\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),e("p",[t._v("注意，键值对的等号两侧不能有空格。")]),t._v(" "),e("h3",{attrs:{id:"_5-4-配置文件的区块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-配置文件的区块"}},[t._v("#")]),t._v(" 5.4. 配置文件的区块")]),t._v(" "),e("p",[e("code",[t._v("[Unit]")]),t._v("区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他\nUnit 的关系。它的主要字段如下。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Description")]),t._v("：简短描述")]),t._v(" "),e("li",[e("code",[t._v("Documentation")]),t._v("：文档地址")]),t._v(" "),e("li",[e("code",[t._v("Requires")]),t._v("：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败")]),t._v(" "),e("li",[e("code",[t._v("Wants")]),t._v("：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败")]),t._v(" "),e("li",[e("code",[t._v("BindsTo")]),t._v("：与"),e("code",[t._v("Requires")]),t._v("类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行")]),t._v(" "),e("li",[e("code",[t._v("Before")]),t._v("：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动")]),t._v(" "),e("li",[e("code",[t._v("After")]),t._v("：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动")]),t._v(" "),e("li",[e("code",[t._v("Conflicts")]),t._v("：这里指定的 Unit 不能与当前 Unit 同时运行")]),t._v(" "),e("li",[e("code",[t._v("Condition...")]),t._v("：当前 Unit 运行必须满足的条件，否则不会运行")]),t._v(" "),e("li",[e("code",[t._v("Assert...")]),t._v("：当前 Unit 运行必须满足的条件，否则会报启动失败")])]),t._v(" "),e("p",[e("code",[t._v("[Install]")]),t._v("通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它\n的主要字段如下。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("WantedBy")]),t._v("：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放\n入"),e("code",[t._v("/etc/systemd/system")]),t._v("目录下面以 Target 名 + "),e("code",[t._v(".wants")]),t._v("后缀构成的子目录中")]),t._v(" "),e("li",[e("code",[t._v("RequiredBy")]),t._v("：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放\n入"),e("code",[t._v("/etc/systemd/system")]),t._v("目录下面以 Target 名 + "),e("code",[t._v(".required")]),t._v("后缀构成的子目录中")]),t._v(" "),e("li",[e("code",[t._v("Alias")]),t._v("：当前 Unit 可用于启动的别名")]),t._v(" "),e("li",[e("code",[t._v("Also")]),t._v("：当前 Unit 激活（enable）时，会被同时激活的其他 Unit")])]),t._v(" "),e("p",[e("code",[t._v("[Service]")]),t._v("区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的\n主要字段如下。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Type")]),t._v("：定义启动时的进程行为。它有以下几种值。")]),t._v(" "),e("li",[e("code",[t._v("Type=simple")]),t._v("：默认值，执行"),e("code",[t._v("ExecStart")]),t._v("指定的命令，启动主进程")]),t._v(" "),e("li",[e("code",[t._v("Type=forking")]),t._v("：以 fork 方式从父进程创建子进程，创建后父进程会立即退出")]),t._v(" "),e("li",[e("code",[t._v("Type=oneshot")]),t._v("：一次性进程，Systemd 会等当前服务退出，再继续往下执行")]),t._v(" "),e("li",[e("code",[t._v("Type=dbus")]),t._v("：当前服务通过 D-Bus 启动")]),t._v(" "),e("li",[e("code",[t._v("Type=notify")]),t._v("：当前服务启动完毕，会通知"),e("code",[t._v("Systemd")]),t._v("，再继续往下执行")]),t._v(" "),e("li",[e("code",[t._v("Type=idle")]),t._v("：若有其他任务执行完毕，当前服务才会运行")]),t._v(" "),e("li",[e("code",[t._v("ExecStart")]),t._v("：启动当前服务的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStartPre")]),t._v("：启动当前服务之前执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStartPost")]),t._v("：启动当前服务之后执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecReload")]),t._v("：重启当前服务时执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStop")]),t._v("：停止当前服务时执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStopPost")]),t._v("：停止当其服务之后执行的命令")]),t._v(" "),e("li",[e("code",[t._v("RestartSec")]),t._v("：自动重启当前服务间隔的秒数")]),t._v(" "),e("li",[e("code",[t._v("Restart")]),t._v("：定义何种情况 Systemd 会自动重启当前服务，可能的值包括"),e("code",[t._v("always")]),t._v("（总是\n重启）、"),e("code",[t._v("on-success")]),t._v("、"),e("code",[t._v("on-failure")]),t._v("、"),e("code",[t._v("on-abnormal")]),t._v("、"),e("code",[t._v("on-abort")]),t._v("、"),e("code",[t._v("on-watchdog")])]),t._v(" "),e("li",[e("code",[t._v("TimeoutSec")]),t._v("：定义 Systemd 停止当前服务之前等待的秒数")]),t._v(" "),e("li",[e("code",[t._v("Environment")]),t._v("：指定环境变量")])]),t._v(" "),e("p",[t._v("Unit 配置文件的完整字段清单，请参\n考"),e("a",{attrs:{href:"https://www.freedesktop.org/software/systemd/man/systemd.unit.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"_6-target"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-target"}},[t._v("#")]),t._v(" 6. Target")]),t._v(" "),e("p",[t._v("启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要\n哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。")]),t._v(" "),e("p",[t._v('简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候\n，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于"状态点\n"，启动某个 Target 就好比启动到某种状态。')]),t._v(" "),e("p",[t._v("传统的"),e("code",[t._v("init")]),t._v("启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是\n，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动\n。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前系统的所有 Target")]),t._v("\n$ systemctl list-unit-files --type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("target\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看一个 Target 包含的所有 Unit")]),t._v("\n$ systemctl list-dependencies multi-user.target\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看启动时的默认 Target")]),t._v("\n$ systemctl get-default\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置启动时的默认 Target")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl set-default multi-user.target\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换 Target 时，默认不关闭前一个 Target 启动的进程，")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# systemctl isolate 命令改变这种行为，")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭前一个 Target 里面所有不属于后一个 Target 的进程")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl isolate multi-user.target\n")])])]),e("p",[t._v("Target 与 传统 RunLevel 的对应关系如下。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("Traditional runlevel      New target name     Symbolically linked to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel0.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" poweroff.target\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel1.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" rescue.target\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel2.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" multi-user.target\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel3.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" multi-user.target\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel4.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" multi-user.target\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel5.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" graphical.target\nRunlevel "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("           "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    runlevel6.target -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" reboot.target\n")])])]),e("p",[t._v("它与"),e("code",[t._v("init")]),t._v("进程的主要差别如下。")]),t._v(" "),e("p",[e("strong",[t._v("（1）默认的 RunLevel")]),t._v("（在"),e("code",[t._v("/etc/inittab")]),t._v("文件设置）现在被默认的 Target 取代，\n位置是"),e("code",[t._v("/etc/systemd/system/default.target")]),t._v("，通常符号链接到"),e("code",[t._v("graphical.target")]),t._v("（\n图形界面）或者"),e("code",[t._v("multi-user.target")]),t._v("（多用户命令行）。")]),t._v(" "),e("p",[e("strong",[t._v("（2）启动脚本的位置")]),t._v("，以前是"),e("code",[t._v("/etc/init.d")]),t._v("目录，符号链接到不同的 RunLevel 目\n录 （比如"),e("code",[t._v("/etc/rc3.d")]),t._v("、"),e("code",[t._v("/etc/rc5.d")]),t._v("等），现在则存放\n在"),e("code",[t._v("/lib/systemd/system")]),t._v("和"),e("code",[t._v("/etc/systemd/system")]),t._v("目录。")]),t._v(" "),e("p",[e("strong",[t._v("（3）配置文件的位置")]),t._v("，以前"),e("code",[t._v("init")]),t._v("进程的配置文件是"),e("code",[t._v("/etc/inittab")]),t._v("，各种服务的\n配置文件存放在"),e("code",[t._v("/etc/sysconfig")]),t._v("目录。现在的配置文件主要存放在"),e("code",[t._v("/lib/systemd")]),t._v("目录\n，在"),e("code",[t._v("/etc/systemd")]),t._v("目录里面的修改可以覆盖原始设置。")]),t._v(" "),e("h2",{attrs:{id:"_7-日志管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-日志管理"}},[t._v("#")]),t._v(" 7. 日志管理")]),t._v(" "),e("p",[t._v("Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用"),e("code",[t._v("journalctl")]),t._v("一个命\n令，查看所有日志（内核日志和应用日志）。日志的配置文件\n是"),e("code",[t._v("/etc/systemd/journald.conf")]),t._v("。")]),t._v(" "),e("p",[e("code",[t._v("journalctl")]),t._v("功能强大，用法非常多。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有日志（默认情况下 ，只保存本次启动的日志）")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看内核日志（不显示应用日志）")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -k\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看系统本次启动的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -b\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -b -0\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看上一次启动的日志（需更改设置）")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -b -1\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定时间的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --since"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2012-10-30 18:17:16"')]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --since "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20 min ago"')]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --since yesterday\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --since "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2015-01-10"')]),t._v(" --until "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2015-01-11 03:00"')]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --since 09:00 --until "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1 hour ago"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示尾部的最新10行日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示尾部指定行数的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 实时滚动显示最新日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -f\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定服务的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl /usr/lib/systemd/systemd\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定进程的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("_PID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看某个路径的脚本的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl /usr/bin/bash\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定用户的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("_UID")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),t._v(" --since today\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看某个 Unit 的日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -u nginx.service\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -u nginx.service --since today\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 实时滚动显示某个 Unit 的最新日志")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -u nginx.service -f\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并显示多个 Unit 的日志")]),t._v("\n$ journalctl -u nginx.service -u php-fpm.service --since today\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看指定优先级（及其以上级别）的日志，共有8级")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0: emerg")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1: alert")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2: crit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3: err")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4: warning")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5: notice")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6: info")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 7: debug")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -p err -b\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志默认分页输出，--no-pager 改为正常的标准输出")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --no-pager\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以 JSON 格式（单行）输出")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -b -u nginx.service -o json\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以 JSON 格式（多行）输出，可读性更好")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示日志占据的硬盘空间")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --disk-usage\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定日志文件占据的最大空间")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --vacuum-size"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("1G\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定日志文件保存多久")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" journalctl --vacuum-time"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("1years\n")])])]),e("h2",{attrs:{id:"_8-实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-实战"}},[t._v("#")]),t._v(" 8. 实战")]),t._v(" "),e("h3",{attrs:{id:"_8-1-开机启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-开机启动"}},[t._v("#")]),t._v(" 8.1. 开机启动")]),t._v(" "),e("p",[t._v("对于那些支持 Systemd 的软件，安装的时候，会自动在"),e("code",[t._v("/usr/lib/systemd/system")]),t._v("目录添\n加一个配置文件。")]),t._v(" "),e("p",[t._v("如果你想让该软件开机启动，就执行下面的命令（以"),e("code",[t._v("httpd.service")]),t._v("为例）。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" httpd\n")])])]),e("p",[t._v("上面的命令相当于在"),e("code",[t._v("/etc/systemd/system")]),t._v("目录添加一个符号链接，指\n向"),e("code",[t._v("/usr/lib/systemd/system")]),t._v("里面的"),e("code",[t._v("httpd.service")]),t._v("文件。")]),t._v(" "),e("p",[t._v("这是因为开机时，"),e("code",[t._v("Systemd")]),t._v("只执行"),e("code",[t._v("/etc/systemd/system")]),t._v("目录里面的配置文件。这也意味\n着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。")]),t._v(" "),e("h3",{attrs:{id:"_8-2-启动服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-启动服务"}},[t._v("#")]),t._v(" 8.2. 启动服务")]),t._v(" "),e("p",[t._v("设置开机启动以后，软件并不会立即启动，必须等到下一次开机。如果想现在就运行该软件\n，那么要执行"),e("code",[t._v("systemctl start")]),t._v("命令。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl start httpd\n")])])]),e("p",[t._v("执行上面的命令以后，有可能启动失败，因此要用"),e("code",[t._v("systemctl status")]),t._v("命令查看一下该服务\n的状态。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl status httpd\n\nhttpd.service - The Apache HTTP Server\nLoaded: loaded "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/usr/lib/systemd/system/httpd.service"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" enabled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nActive: active "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("running"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" since 金 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v("-12-05 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(":18:22 JST"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 7min ago\nMain PID: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4349")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("httpd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nStatus: "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Total requests: 1; Current requests/sec: 0; Current traffic:   0 B/sec"')]),t._v("\nCGroup: /system.slice/httpd.service\n        ├─4349 /usr/sbin/httpd -DFOREGROUND\n        ├─4350 /usr/sbin/httpd -DFOREGROUND\n        ├─4351 /usr/sbin/httpd -DFOREGROUND\n        ├─4352 /usr/sbin/httpd -DFOREGROUND\n        ├─4353 /usr/sbin/httpd -DFOREGROUND\n        └─4354 /usr/sbin/httpd -DFOREGROUND\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("月 05 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(":18:22 localhost.localdomain systemd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": Starting The Apache HTTP Server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("月 05 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(":18:22 localhost.localdomain systemd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": Started The Apache HTTP Server.\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("月 05 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(":22:40 localhost.localdomain systemd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(": Started The Apache HTTP Server.\n")])])]),e("p",[t._v("上面的输出结果含义如下。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Loaded")]),t._v("行：配置文件的位置，是否设为开机启动")]),t._v(" "),e("li",[e("code",[t._v("Active")]),t._v("行：表示正在运行")]),t._v(" "),e("li",[e("code",[t._v("Main PID")]),t._v("行：主进程 ID")]),t._v(" "),e("li",[e("code",[t._v("Status")]),t._v("行：由应用本身（这里是 httpd ）提供的软件当前状态")]),t._v(" "),e("li",[e("code",[t._v("CGroup")]),t._v("块：应用的所有子进程")]),t._v(" "),e("li",[t._v("日志块：应用的日志")])]),t._v(" "),e("h3",{attrs:{id:"_8-3-停止服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-停止服务"}},[t._v("#")]),t._v(" 8.3. 停止服务")]),t._v(" "),e("p",[t._v("终止正在运行的服务，需要执行"),e("code",[t._v("systemctl stop")]),t._v("命令。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl stop httpd.service\n")])])]),e("p",[t._v('有时候，该命令可能没有响应，服务停不下来。这时候就不得不"杀进程"了，向正在运行的\n进程发出'),e("code",[t._v("kill")]),t._v("信号。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" httpd.service\n")])])]),e("p",[t._v("此外，重启服务要执行"),e("code",[t._v("systemctl restart")]),t._v("命令。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart httpd.service\n")])])]),e("h3",{attrs:{id:"_8-4-读懂配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-读懂配置文件"}},[t._v("#")]),t._v(" 8.4. 读懂配置文件")]),t._v(" "),e("p",[t._v("一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。")]),t._v(" "),e("p",[t._v("前面说过，配置文件主要放在"),e("code",[t._v("/usr/lib/systemd/system")]),t._v("目录，也可能\n在"),e("code",[t._v("/etc/systemd/system")]),t._v("目录。找到配置文件以后，使用文本编辑器打开即可。")]),t._v(" "),e("p",[e("code",[t._v("systemctl cat")]),t._v("命令可以用来查看配置文件，下面以"),e("code",[t._v("sshd.service")]),t._v("文件为例，它的作用\n是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ systemctl cat sshd.service\n\n[Unit]\nDescription=OpenSSH server daemon\nDocumentation=man:sshd(8) man:sshd_config(5)\nAfter=network.target sshd-keygen.service\nWants=sshd-keygen.service\n\n[Service]\nEnvironmentFile=/etc/sysconfig/sshd\nExecStart=/usr/sbin/sshd -D $OPTIONS\nExecReload=/bin/kill -HUP $MAINPID\nType=simple\nKillMode=process\nRestart=on-failure\nRestartSec=42s\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("p",[t._v("可以看到，配置文件分成几个区块，每个区块包含若干条键值对。")]),t._v(" "),e("p",[t._v("下面依次解释每个区块的内容。")]),t._v(" "),e("h3",{attrs:{id:"_8-5-unit-区块：启动顺序与依赖关系。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-5-unit-区块：启动顺序与依赖关系。"}},[t._v("#")]),t._v(" 8.5. [Unit] 区块：启动顺序与依赖关系。")]),t._v(" "),e("p",[e("code",[t._v("Unit")]),t._v("区块的"),e("code",[t._v("Description")]),t._v("字段给出当前服务的简单描述，"),e("code",[t._v("Documentation")]),t._v("字段给出文档\n位置。")]),t._v(" "),e("p",[t._v("接下来的设置是启动顺序和依赖关系，这个比较重要。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("After")]),t._v("字段：表示如果"),e("code",[t._v("network.target")]),t._v("或"),e("code",[t._v("sshd-keygen.service")]),t._v("需要启动，那\n么"),e("code",[t._v("sshd.service")]),t._v("应该在它们之后启动。")])]),t._v(" "),e("p",[t._v("相应地，还有一个"),e("code",[t._v("Before")]),t._v("字段，定义"),e("code",[t._v("sshd.service")]),t._v("应该在哪些服务之前启动。")]),t._v(" "),e("p",[t._v("注意，"),e("code",[t._v("After")]),t._v("和"),e("code",[t._v("Before")]),t._v("字段只涉及启动顺序，不涉及依赖关系。")]),t._v(" "),e("p",[t._v("举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在\npostgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因\n，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。")]),t._v(" "),e("p",[t._v("设置依赖关系，需要使用"),e("code",[t._v("Wants")]),t._v("字段和"),e("code",[t._v("Requires")]),t._v("字段。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("Wants")]),t._v("字段：表示"),e("code",[t._v("sshd.service")]),t._v("与"),e("code",[t._v("sshd-keygen.service")]),t._v('之间存在"弱依赖"关系，即\n如果"sshd-keygen.service"启动失败或停止运行，不影响'),e("code",[t._v("sshd.service")]),t._v("继续执行。")])]),t._v(" "),e("p",[e("code",[t._v("Requires")]),t._v('字段则表示"强依赖"关系，即如果该服务启动失败或异常退出，那\n么'),e("code",[t._v("sshd.service")]),t._v("也必须退出。")]),t._v(" "),e("p",[t._v("注意，"),e("code",[t._v("Wants")]),t._v("字段与"),e("code",[t._v("Requires")]),t._v("字段只涉及依赖关系，与启动顺序无关，默认情况下是同\n时启动的。")]),t._v(" "),e("h3",{attrs:{id:"_8-6-service-区块：启动行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-service-区块：启动行为"}},[t._v("#")]),t._v(" 8.6. [Service] 区块：启动行为")]),t._v(" "),e("p",[e("code",[t._v("Service")]),t._v("区块定义如何启动当前服务。")]),t._v(" "),e("h4",{attrs:{id:"_8-6-1-启动命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-1-启动命令"}},[t._v("#")]),t._v(" 8.6.1. 启动命令")]),t._v(" "),e("p",[t._v("许多软件都有自己的环境参数文件，该文件可以用"),e("code",[t._v("EnvironmentFile")]),t._v("字段读取。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("EnvironmentFile")]),t._v("字段：指定当前服务的环境参数文件。该文件内部的"),e("code",[t._v("key=value")]),t._v("键值\n对，可以用"),e("code",[t._v("$key")]),t._v("的形式，在当前配置文件中获取。")])]),t._v(" "),e("p",[t._v("上面的例子中，sshd 的环境参数文件是"),e("code",[t._v("/etc/sysconfig/sshd")]),t._v("。")]),t._v(" "),e("p",[t._v("配置文件里面最重要的字段是"),e("code",[t._v("ExecStart")]),t._v("。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("ExecStart")]),t._v("字段：定义启动进程时执行的命令。")])]),t._v(" "),e("p",[t._v("上面的例子中，启动"),e("code",[t._v("sshd")]),t._v("，执行的命令是"),e("code",[t._v("/usr/sbin/sshd -D $OPTIONS")]),t._v("，其中的变\n量"),e("code",[t._v("$OPTIONS")]),t._v("就来自"),e("code",[t._v("EnvironmentFile")]),t._v("字段指定的环境参数文件。")]),t._v(" "),e("p",[t._v("与之作用相似的，还有如下这些字段。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("ExecReload")]),t._v("字段：重启服务时执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStop")]),t._v("字段：停止服务时执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStartPre")]),t._v("字段：启动服务之前执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStartPost")]),t._v("字段：启动服务之后执行的命令")]),t._v(" "),e("li",[e("code",[t._v("ExecStopPost")]),t._v("字段：停止服务之后执行的命令")])]),t._v(" "),e("p",[t._v("请看下面的例子。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Service]\nExecStart=/bin/echo execstart1\nExecStart=\nExecStart=/bin/echo execstart2\nExecStartPost=/bin/echo post1\nExecStartPost=/bin/echo post2\n")])])]),e("p",[t._v("上面这个配置文件，第二行"),e("code",[t._v("ExecStart")]),t._v("设为空值，等于取消了第一行的设置，运行结果如\n下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("execstart2\npost1\npost2\n")])])]),e("p",[t._v("所有的启动设置之前，都可以加上一个连词号（"),e("code",[t._v("-")]),t._v('），表示"抑制错误"，即发生错误的时\n候，不影响其他命令的执行。比如，'),e("code",[t._v("EnvironmentFile=-/etc/sysconfig/sshd")]),t._v("（注意等号\n后面的那个连词号），就表示即使"),e("code",[t._v("/etc/sysconfig/sshd")]),t._v("文件不存在，也不会抛出错误。")]),t._v(" "),e("h4",{attrs:{id:"_8-6-2-启动类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-2-启动类型"}},[t._v("#")]),t._v(" 8.6.2. 启动类型")]),t._v(" "),e("p",[e("code",[t._v("Type")]),t._v("字段定义启动类型。它可以设置的值如下。")]),t._v(" "),e("ul",[e("li",[t._v("simple（默认值）："),e("code",[t._v("ExecStart")]),t._v("字段启动的进程为主进程")]),t._v(" "),e("li",[t._v("forking："),e("code",[t._v("ExecStart")]),t._v("字段将以"),e("code",[t._v("fork()")]),t._v("方式启动，此时父进程将会退出，子进程将成\n为主进程")]),t._v(" "),e("li",[t._v("oneshot：类似于"),e("code",[t._v("simple")]),t._v("，但只执行一次，Systemd 会等它执行完，才启动其他服务")]),t._v(" "),e("li",[t._v("dbus：类似于"),e("code",[t._v("simple")]),t._v("，但会等待 D-Bus 信号后启动")]),t._v(" "),e("li",[t._v("notify：类似于"),e("code",[t._v("simple")]),t._v("，启动结束后会发出通知信号，然后 Systemd 再启动其他服\n务")]),t._v(" "),e("li",[t._v("idle：类似于"),e("code",[t._v("simple")]),t._v("，但是要等到其他任务都执行完，才会启动该服务。一种使用场\n合是为让该服务的输出，不与其他服务的输出相混合")])]),t._v(" "),e("p",[t._v("下面是一个"),e("code",[t._v("oneshot")]),t._v("的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写\n。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Switch-off Touchpad\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/touchpad-off\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("p",[t._v("上面的配置文件，启动类型设为"),e("code",[t._v("oneshot")]),t._v("，就表明这个服务只要运行一次就够了，不需要\n长期运行。")]),t._v(" "),e("p",[t._v("如果关闭以后，将来某个时候还想打开，配置文件修改如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("[Unit]\nDescription=Switch-off Touchpad\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/touchpad-off start\nExecStop=/usr/bin/touchpad-off stop\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n")])])]),e("p",[t._v("上面配置文件中，"),e("code",[t._v("RemainAfterExit")]),t._v("字段设为"),e("code",[t._v("yes")]),t._v("，表示进程退出以后，服务仍然保持执\n行。这样的话，一旦使用"),e("code",[t._v("systemctl stop")]),t._v("命令停止服务，"),e("code",[t._v("ExecStop")]),t._v("指定的命令就会执行\n，从而重新开启触摸板。")]),t._v(" "),e("h4",{attrs:{id:"_8-6-3-重启行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-6-3-重启行为"}},[t._v("#")]),t._v(" 8.6.3. 重启行为")]),t._v(" "),e("p",[e("code",[t._v("Service")]),t._v("区块有一些字段，定义了重启行为。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("KillMode")]),t._v("字段：定义 Systemd 如何停止 sshd 服务。")])]),t._v(" "),e("p",[t._v("上面这个例子中，将"),e("code",[t._v("KillMode")]),t._v("设为"),e("code",[t._v("process")]),t._v("，表示只停止主进程，不停止任何 sshd 子\n进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重\n要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。")]),t._v(" "),e("p",[e("code",[t._v("KillMode")]),t._v("字段可以设置的值如下。")]),t._v(" "),e("ul",[e("li",[t._v("control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉")]),t._v(" "),e("li",[t._v("process：只杀主进程")]),t._v(" "),e("li",[t._v("mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号")]),t._v(" "),e("li",[t._v("none：没有进程会被杀掉，只是执行服务的 stop 命令。")])]),t._v(" "),e("p",[t._v("接下来是"),e("code",[t._v("Restart")]),t._v("字段。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("Restart")]),t._v("字段：定义了 sshd 退出后，Systemd 的重启方式。")])]),t._v(" "),e("p",[t._v("上面的例子中，"),e("code",[t._v("Restart")]),t._v("设为"),e("code",[t._v("on-failure")]),t._v("，表示任何意外的失败，就将重启 sshd。如果\nsshd 正常停止（比如执行"),e("code",[t._v("systemctl stop")]),t._v("命令），它就不会重启。")]),t._v(" "),e("p",[e("code",[t._v("Restart")]),t._v("字段可以设置的值如下。")]),t._v(" "),e("ul",[e("li",[t._v("no（默认值）：退出后不会重启")]),t._v(" "),e("li",[t._v("on-success：只有正常退出时（退出状态码为 0），才会重启")]),t._v(" "),e("li",[t._v("on-failure：非正常退出时（退出状态码非 0），包括被信号终止和超时，才会重启")]),t._v(" "),e("li",[t._v("on-abnormal：只有被信号终止和超时，才会重启")]),t._v(" "),e("li",[t._v("on-abort：只有在收到没有捕捉到的信号终止时，才会重启")]),t._v(" "),e("li",[t._v("on-watchdog：超时退出，才会重启")]),t._v(" "),e("li",[t._v("always：不管是什么退出原因，总是重启")])]),t._v(" "),e("p",[t._v("对于守护进程，推荐设为"),e("code",[t._v("on-failure")]),t._v("。对于那些允许发生错误退出的服务，可以设\n为"),e("code",[t._v("on-abnormal")]),t._v("。")]),t._v(" "),e("p",[t._v("最后是"),e("code",[t._v("RestartSec")]),t._v("字段。")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("RestartSec")]),t._v("字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等\n待 42 秒。")])]),t._v(" "),e("h3",{attrs:{id:"_8-7-install-区块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-install-区块"}},[t._v("#")]),t._v(" 8.7. [Install] 区块")]),t._v(" "),e("p",[e("code",[t._v("Install")]),t._v("区块，定义如何安装这个配置文件，即怎样做到开机启动。")]),t._v(" "),e("p",[e("code",[t._v("WantedBy")]),t._v("字段：表示该服务所在的 Target。")]),t._v(" "),e("p",[e("code",[t._v("Target")]),t._v("的含义是服务组，表示一组服务。"),e("code",[t._v("WantedBy=multi-user.target")]),t._v("指的是，sshd\n所在的 Target 是"),e("code",[t._v("multi-user.target")]),t._v("。")]),t._v(" "),e("p",[t._v("这个设置非常重要，因为执行"),e("code",[t._v("systemctl enable sshd.service")]),t._v("命令时\n，"),e("code",[t._v("sshd.service")]),t._v("的一个符号链接，就会放在"),e("code",[t._v("/etc/systemd/system")]),t._v("目录下面\n的"),e("code",[t._v("multi-user.target.wants")]),t._v("子目录之中。")]),t._v(" "),e("p",[t._v("Systemd 有默认的启动 Target。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl get-default\nmulti-user.target\n")])])]),e("p",[t._v("上面的结果表示，默认的启动 Target 是"),e("code",[t._v("multi-user.target")]),t._v("。在这个组里的所有服务，\n都将开机启动。这就是为什么"),e("code",[t._v("systemctl enable")]),t._v("命令能设置开机启动的原因。")]),t._v(" "),e("p",[t._v("使用 Target 的时候，"),e("code",[t._v("systemctl list-dependencies")]),t._v("命令和"),e("code",[t._v("systemctl isolate")]),t._v("命令也\n很有用。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 multi-user.target 包含的所有服务")]),t._v("\n$ systemctl list-dependencies multi-user.target\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到另一个 target")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# shutdown.target 就是关机状态")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl isolate shutdown.target\n")])])]),e("p",[t._v("一般来说，常用的 Target 有两个：一个是"),e("code",[t._v("multi-user.target")]),t._v("，表示多用户命令行状态\n；另一个是"),e("code",[t._v("graphical.target")]),t._v("，表示图形用户状态，它依赖于"),e("code",[t._v("multi-user.target")]),t._v("。官\n方文档有一张非常清晰的\n"),e("a",{attrs:{href:"https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup",target:"_blank",rel:"noopener noreferrer"}},[t._v("Target 依赖关系图"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"_8-8-target-的配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-8-target-的配置文件"}},[t._v("#")]),t._v(" 8.8. Target 的配置文件")]),t._v(" "),e("p",[t._v("Target 也有自己的配置文件。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ systemctl "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" multi-user.target\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Unit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Description")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Multi-User System\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Documentation")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("man:systemd.special"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Requires")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("basic.target\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("Conflicts")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("rescue.service rescue.target\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("After")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("basic.target rescue.service rescue.target\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("AllowIsolate")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("yes\n")])])]),e("p",[t._v("注意，Target 配置文件里面没有启动命令。")]),t._v(" "),e("p",[t._v("上面输出结果中，主要字段含义如下。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Requires")]),t._v("字段：要求"),e("code",[t._v("basic.target")]),t._v("一起运行。")]),t._v(" "),e("li",[e("code",[t._v("Conflicts")]),t._v("字段：冲突字段。如果"),e("code",[t._v("rescue.service")]),t._v("或"),e("code",[t._v("rescue.target")]),t._v("正在运行\n，"),e("code",[t._v("multi-user.target")]),t._v("就不能运行，反之亦然。")]),t._v(" "),e("li",[e("code",[t._v("After")]),t._v("：表示"),e("code",[t._v("multi-user.target")]),t._v("在"),e("code",[t._v("basic.target")]),t._v(" 、 "),e("code",[t._v("rescue.service")]),t._v("、\n"),e("code",[t._v("rescue.target")]),t._v("之后启动，如果它们有启动的话。")]),t._v(" "),e("li",[e("code",[t._v("AllowIsolate")]),t._v("：允许使用"),e("code",[t._v("systemctl isolate")]),t._v("命令切换到"),e("code",[t._v("multi-user.target")]),t._v("。")])]),t._v(" "),e("h3",{attrs:{id:"_8-9-修改配置文件后重启"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-9-修改配置文件后重启"}},[t._v("#")]),t._v(" 8.9. 修改配置文件后重启")]),t._v(" "),e("p",[t._v("修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载配置文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl daemon-reload\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启相关服务")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart foobar\n")])])]),e("h2",{attrs:{id:"_9-参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-参考资料"}},[t._v("#")]),t._v(" 9. 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Systemd 入门教程：命令篇"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"hhttp://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html"}},[t._v("Systemd 入门教程：实战篇")])],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);