(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{471:function(e,s,a){"use strict";a.r(s);var t=a(14),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#free"}},[e._v("#")]),e._v(" free")]),e._v(" "),a("p",[e._v("显示内存的使用情况")]),e._v(" "),a("h2",{attrs:{id:"补充说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充说明"}},[e._v("#")]),e._v(" 补充说明")]),e._v(" "),a("p",[a("strong",[e._v("free 命令")]),e._v(" 可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。")]),e._v(" "),a("h3",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("选项"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("h3",{attrs:{id:"选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[e._v("#")]),e._v(" 选项")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("-b "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以Byte为单位显示内存使用情况；")]),e._v("\n-k "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以KB为单位显示内存使用情况；")]),e._v("\n-m "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以MB为单位显示内存使用情况；")]),e._v("\n-g "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以GB为单位显示内存使用情况。")]),e._v("\n-o "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 不显示缓冲区调节列；")]),e._v("\n-s"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("间隔秒数"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 持续观察内存使用状况；")]),e._v("\n-t "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 显示内存总和列；")]),e._v("\n-V "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 显示版本信息。")]),e._v("\n")])])]),a("h3",{attrs:{id:"实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[e._v("#")]),e._v(" 实例")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" -t    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以总和的形式显示内存的使用信息")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" -s "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 周期性的查询内存使用信息，每10s 执行一次命令")]),e._v("\n")])])]),a("p",[e._v("显示内存使用情况")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" -m\n             total       used       "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v("     shared    buffers     cached\nMem:          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2016")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1973")]),e._v("         "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("42")]),e._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("163")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1497")]),e._v("\n-/+ buffers/cache:        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("312")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1703")]),e._v("\nSwap:         "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4094")]),e._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4094")]),e._v("\n")])])]),a("p",[a("strong",[e._v("第一部分 Mem 行解释：")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("total：内存总数；\nused：已经使用的内存数；\nfree：空闲的内存数；\nshared：当前已经废弃不用；\nbuffers Buffer：缓存内存数；\ncached Page：缓存内存数。\n")])])]),a("p",[e._v("关系：total = used + free")]),e._v(" "),a("p",[a("strong",[e._v("第二部分(-/+ buffers/cache)解释:")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("-buffers/cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" used内存数：第一部分Mem行中的 used – buffers – cached\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("+buffers/cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" free内存数: 第一部分Mem行中的 "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" + buffers + cached\n")])])]),a("p",[e._v("可见-buffers/cache 反映的是被程序实实在在吃掉的内存，而+buffers/cache 反映的是可以挪用的内存总数。")]),e._v(" "),a("p",[e._v("第三部分是指交换分区。")]),e._v(" "),a("p",[e._v("输出结果的第四行是交换分区 SWAP 的，也就是我们通常所说的虚拟内存。\n区别：第二行(mem)的 used/free 与第三行(-/+ buffers/cache) used/free 的区别。 这两个的区别在于使用的角度来看，第一行是从 OS 的角度来看，因为对于 OS，buffers/cached 都是属于被使用，所以他的可用内存是 2098428KB,已用内存是 30841684KB,其中包括，内核（OS）使用+Application(X, oracle,etc)使用的+buffers+cached.")]),e._v(" "),a("p",[e._v("第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached 是等于可用的，因为 buffer/cached 是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached 会很快地被回收。")]),e._v(" "),a("p",[e._v("所以从应用程序的角度来说，可用内存=系统 free memory+buffers+cached。\n如本机情况的可用内存为：")]),e._v(" "),a("p",[e._v("18007156=2098428KB+4545340KB+11363424KB")]),e._v(" "),a("p",[e._v("接下来解释什么时候内存会被交换，以及按什么方交换。")]),e._v(" "),a("p",[e._v("当可用内存少于额定值的时候，就会开会进行交换。如何看额定值：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /proc/meminfo\n\nMemTotal:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("16140816")]),e._v(" kB\nMemFree:          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("816004")]),e._v(" kB\nMemAvailable:    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2913824")]),e._v(" kB\nBuffers:           "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("17912")]),e._v(" kB\nCached:          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2239076")]),e._v(" kB\nSwapCached:            "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" kB\nActive:         "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("12774804")]),e._v(" kB\nInactive:        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1594328")]),e._v(" kB\nActive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("anon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("12085544")]),e._v(" kB\nInactive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("anon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("94572")]),e._v(" kB\nActive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":     "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("689260")]),e._v(" kB\nInactive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":  "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1499756")]),e._v(" kB\nUnevictable:      "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("116888")]),e._v(" kB\nMlocked:          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("116888")]),e._v(" kB\nSwapTotal:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8191996")]),e._v(" kB\nSwapFree:        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8191996")]),e._v(" kB\nDirty:                "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("56")]),e._v(" kB\nWriteback:             "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" kB\nAnonPages:      "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("12229228")]),e._v(" kB\nMapped:           "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("117136")]),e._v(" kB\nShmem:             "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("58736")]),e._v(" kB\nSlab:             "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("395568")]),e._v(" kB\nSReclaimable:     "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("246700")]),e._v(" kB\nSUnreclaim:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("148868")]),e._v(" kB\nKernelStack:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30496")]),e._v(" kB\nPageTables:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("165104")]),e._v(" kB\nNFS_Unstable:          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" kB\nBounce:                "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" kB\nWritebackTmp:          "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" kB\nCommitLimit:    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("16262404")]),e._v(" kB\nCommitted_AS:   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("27698600")]),e._v(" kB\nVmallocTotal:   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("34359738367")]),e._v(" kB\nVmallocUsed:      "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("311072")]),e._v(" kB\nVmallocChunk:   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("34350899200")]),e._v(" kB\nHardwareCorrupted:     "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" kB\nAnonHugePages:   "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3104768")]),e._v(" kB\nHugePages_Total:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\nHugePages_Free:        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\nHugePages_Rsvd:        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\nHugePages_Surp:        "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\nHugepagesize:       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2048")]),e._v(" kB\nDirectMap4k:      "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("225536")]),e._v(" kB\nDirectMap2M:    "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("13279232")]),e._v(" kB\nDirectMap1G:     "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("5242880")]),e._v(" kB\n")])])]),a("p",[e._v("交换将通过三个途径来减少系统中使用的物理页面的个数：")]),e._v(" "),a("ol",[a("li",[e._v("减少缓冲与页面 cache 的大小，")]),e._v(" "),a("li",[e._v("将系统 V 类型的内存页面交换出去，")]),e._v(" "),a("li",[e._v("换出或者丢弃页面。(Application 占用的内存页，也就是物理内存不足）。")])]),e._v(" "),a("p",[e._v("事实上，少量地使用 swap 是不是影响到系统性能的。")]),e._v(" "),a("p",[e._v("那 buffers 和 cached 都是缓存，两者有什么区别呢？")]),e._v(" "),a("p",[e._v("为了提高磁盘存取效率, Linux 做了一些精心的设计, 除了对 dentry 进行缓存(用于 VFS,加速文件路径名到 inode 的转换), 还采取了两种主要 Cache 方式：")]),e._v(" "),a("p",[e._v("Buffer Cache 和 Page Cache。前者针对磁盘块的读写，后者针对文件 inode 的读写。这些 Cache 有效缩短了 I/O 系统调用(比如 read,write,getdents)的时间。\n磁盘的操作有逻辑级（文件系统）和物理级（磁盘块），这两种 Cache 就是分别缓存逻辑和物理级数据的。")]),e._v(" "),a("p",[e._v("Page cache 实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到 page cache。文件的逻辑层需要映射到实际的物理磁盘，这种映射关系由文件系统来完成。当 page cache 的数据需要刷新时，page cache 中的数据交给 buffer cache，因为 Buffer Cache 就是缓存磁盘块的。但是这种处理在 2.6 版本的内核之后就变的很简单了，没有真正意义上的 cache 操作。")]),e._v(" "),a("p",[e._v("Buffer cache 是针对磁盘块的缓存，也就是在没有文件系统的情况下，直接对磁盘进行操作的数据会缓存到 buffer cache 中，例如，文件系统的元数据都会缓存到 buffer cache 中。")]),e._v(" "),a("p",[e._v("简单说来，page cache 用来缓存文件数据，buffer cache 用来缓存磁盘数据。在有文件系统的情况下，对文件操作，那么数据会缓存到 page cache，如果直接采用 dd 等工具对磁盘进行读写，那么数据会缓存到 buffer cache。")]),e._v(" "),a("p",[e._v("所以我们看 linux,只要不用 swap 的交换空间,就不用担心自己的内存太少.如果常常 swap 用很多,可能你就要考虑加物理内存了.这也是 linux 看内存是否够用的标准.")]),e._v(" "),a("p",[e._v("如果是应用服务器的话，一般只看第二行，+buffers/cache,即对应用程序来说 free 的内存太少了，也是该考虑优化程序或加内存了。")])])}),[],!1,null,null,null);s.default=n.exports}}]);