(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{465:function(t,e,s){"use strict";s.r(e);var a=s(14),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dockerfile-最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-最佳实践"}},[t._v("#")]),t._v(" Dockerfile 最佳实践")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80dockerfile-%E6%8C%87%E4%BB%A4"}},[t._v("一、Dockerfile 指令")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#from%E6%8C%87%E5%AE%9A%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F"}},[t._v("FROM(指定基础镜像)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#run%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4"}},[t._v("RUN(执行命令)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#copy%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6"}},[t._v("COPY(复制文件)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#add%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6"}},[t._v("ADD(更高级的复制文件)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#cmd%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4"}},[t._v("CMD(容器启动命令)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#entrypoint%E5%85%A5%E5%8F%A3%E7%82%B9"}},[t._v("ENTRYPOINT(入口点)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#env%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F"}},[t._v("ENV(设置环境变量)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#arg%E6%9E%84%E5%BB%BA%E5%8F%82%E6%95%B0"}},[t._v("ARG(构建参数)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#volume%E5%AE%9A%E4%B9%89%E5%8C%BF%E5%90%8D%E5%8D%B7"}},[t._v("VOLUME(定义匿名卷)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#expose%E6%9A%B4%E9%9C%B2%E7%AB%AF%E5%8F%A3"}},[t._v("EXPOSE(暴露端口)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#workdir%E6%8C%87%E5%AE%9A%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95"}},[t._v("WORKDIR(指定工作目录)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#user%E6%8C%87%E5%AE%9A%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7"}},[t._v("USER(指定当前用户)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#healthcheck%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5"}},[t._v("HEALTHCHECK(健康检查)")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#onbuild%E4%B8%BA%E4%BB%96%E4%BA%BA%E4%BD%9C%E5%AB%81%E8%A1%A3%E8%A3%B3"}},[t._v("ONBUILD(为他人作嫁衣裳)")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[t._v("参考资料")])])]),t._v(" "),s("h2",{attrs:{id:"一、dockerfile-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、dockerfile-简介"}},[t._v("#")]),t._v(" 一、Dockerfile 简介")]),t._v(" "),s("p",[t._v("Docker 镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。")]),t._v(" "),s("p",[t._v("Dockerfile 是一个文本文件，其内包含了一条条的 "),s("strong",[t._v("指令(Instruction)")]),t._v("，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。")]),t._v(" "),s("h3",{attrs:{id:"使用-dockerfile-构建镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-构建镜像"}},[t._v("#")]),t._v(" 使用 Dockerfile 构建镜像")]),t._v(" "),s("h2",{attrs:{id:"二、dockerfile-指令详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、dockerfile-指令详解"}},[t._v("#")]),t._v(" 二、Dockerfile 指令详解")]),t._v(" "),s("h3",{attrs:{id:"from-指定基础镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from-指定基础镜像"}},[t._v("#")]),t._v(" FROM(指定基础镜像)")]),t._v(" "),s("blockquote",[s("p",[t._v("作用："),s("strong",[s("code",[t._v("FROM")]),t._v(" 指令用于指定基础镜像")]),t._v("。")])]),t._v(" "),s("p",[t._v("所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 "),s("code",[t._v("nginx")]),t._v(" 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 "),s("code",[t._v("FROM")]),t._v(" 就是指定"),s("strong",[t._v("基础镜像")]),t._v("，因此一个 "),s("code",[t._v("Dockerfile")]),t._v(" 中 "),s("code",[t._v("FROM")]),t._v(" 是必备的指令，并且必须是第一条指令。")]),t._v(" "),s("p",[t._v("在 "),s("a",{attrs:{href:"https://store.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Store"),s("OutboundLink")],1),t._v(" 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 "),s("a",{attrs:{href:"https://store.docker.com/images/nginx/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("nginx")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/redis/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("redis")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/mongo/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("mongo")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/mysql/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("mysql")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/httpd/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("httpd")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/php/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("php")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/tomcat/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("tomcat")]),s("OutboundLink")],1),t._v(" 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 "),s("a",{attrs:{href:"https://store.docker.com/images/node",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("node")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/openjdk/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("openjdk")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/python/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("python")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/ruby/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("ruby")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/golang/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("golang")]),s("OutboundLink")],1),t._v(" 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。")]),t._v(" "),s("p",[t._v("如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 "),s("a",{attrs:{href:"https://store.docker.com/images/ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("ubuntu")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/debian/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("debian")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/centos/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("centos")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/fedora/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("fedora")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://store.docker.com/images/alpine/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("alpine")]),s("OutboundLink")],1),t._v(" 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。")]),t._v(" "),s("p",[t._v("除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 "),s("code",[t._v("scratch")]),t._v("。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" scratch\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("如果你以 "),s("code",[t._v("scratch")]),t._v(" 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。")]),t._v(" "),s("p",[t._v("不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 "),s("a",{attrs:{href:"https://hub.docker.com/_/swarm/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("swarm")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://quay.io/repository/coreos/etcd",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("coreos/etcd")]),s("OutboundLink")],1),t._v("。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 "),s("code",[t._v("FROM scratch")]),t._v(" 会让镜像体积更加小巧。使用 "),s("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go 语言"),s("OutboundLink")],1),t._v(" 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。")]),t._v(" "),s("h3",{attrs:{id:"run-执行命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-执行命令"}},[t._v("#")]),t._v(" RUN(执行命令)")]),t._v(" "),s("blockquote",[s("p",[s("strong",[s("code",[t._v("RUN")]),t._v(" 指令是用来执行命令行命令的")]),t._v("。由于命令行的强大能力，"),s("code",[t._v("RUN")]),t._v(" 指令在定制镜像时是最常用的指令之一。其格式有两种：")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("shell")]),t._v(" 格式："),s("code",[t._v("RUN <命令>")]),t._v("，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 "),s("code",[t._v("RUN")]),t._v(" 指令就是这种格式。")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<h1>Hello, Docker!</h1>'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" /usr/share/nginx/html/index.html\n")])])]),s("ul",[s("li",[s("em",[t._v("exec")]),t._v(" 格式："),s("code",[t._v('RUN ["可执行文件", "参数1", "参数2"]')]),t._v("，这更像是函数调用中的格式。")])])]),t._v(" "),s("p",[t._v("既然 "),s("code",[t._v("RUN")]),t._v(" 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" debian"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("jessie\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get update\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y gcc libc6"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dev make\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" wget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("O redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p /usr/src/redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xzf redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/src/redis "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("components=1\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/src/redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/src/redis install\n")])])]),s("p",[t._v("之前说过，Dockerfile 中每一个指令都会建立一层，"),s("code",[t._v("RUN")]),t._v(" 也不例外。每一个 "),s("code",[t._v("RUN")]),t._v(" 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，"),s("code",[t._v("commit")]),t._v(" 这一层的修改，构成新的镜像。")]),t._v(" "),s("p",[t._v("而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。")]),t._v(" "),s("p",[s("em",[t._v("Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。")])]),t._v(" "),s("p",[t._v("上面的 "),s("code",[t._v("Dockerfile")]),t._v(" 正确的写法应该是这样：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" debian"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("jessie\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" buildDeps="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gcc libc6-dev make'")]),t._v(" \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get update \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y $buildDeps \\\n    && wget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("O redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://download.redis.io/releases/redis-3.2.5.tar.gz"')]),t._v(" \\\n    && mkdir "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p /usr/src/redis \\\n    && tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xzf redis.tar.gz "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/src/redis "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("components=1 \\\n    && make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/src/redis \\\n    && make "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/src/redis install \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r /usr/src/redis \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get purge "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("remove $buildDeps\n")])])]),s("p",[t._v("首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 "),s("code",[t._v("RUN")]),t._v(" 对一一对应不同的命令，而是仅仅使用一个 "),s("code",[t._v("RUN")]),t._v(" 指令，并使用 "),s("code",[t._v("&&")]),t._v(" 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。")]),t._v(" "),s("p",[t._v("并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 "),s("code",[t._v("\\")]),t._v(" 的命令换行方式，以及行首 "),s("code",[t._v("#")]),t._v(" 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。")]),t._v(" "),s("p",[t._v("此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 "),s("code",[t._v("apt")]),t._v(" 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。")]),t._v(" "),s("p",[t._v("很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。")]),t._v(" "),s("h3",{attrs:{id:"copy-复制文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-复制文件"}},[t._v("#")]),t._v(" COPY(复制文件)")]),t._v(" "),s("blockquote",[s("p",[s("strong",[s("code",[t._v("COPY")]),t._v(" 指令将从构建上下文目录中 "),s("code",[t._v("<源路径>")]),t._v(" 的文件/目录复制到新的一层的镜像内的 "),s("code",[t._v("<目标路径>")]),t._v(" 位置。")])])]),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("COPY [--chown=<user>:<group>] <源路径>... <目标路径>")])]),t._v(" "),s("li",[s("code",[t._v('COPY [--chown=<user>:<group>] ["<源路径1>",... "<目标路径>"]')])])]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" package.json /usr/src/app/\n")])])]),s("p",[s("code",[t._v("<源路径>")]),t._v(" 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 "),s("a",{attrs:{href:"https://golang.org/pkg/path/filepath/#Match",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("filepath.Match")]),s("OutboundLink")],1),t._v(" 规则，如：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" hom* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" hom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(".txt /mydir/\n")])])]),s("p",[s("code",[t._v("<目标路径>")]),t._v(" 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 "),s("code",[t._v("WORKDIR")]),t._v(" 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。")]),t._v(" "),s("p",[t._v("此外，还需要注意一点，使用 "),s("code",[t._v("COPY")]),t._v(" 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。")]),t._v(" "),s("p",[t._v("在使用该指令的时候还可以加上 "),s("code",[t._v("--chown=<user>:<group>")]),t._v(" 选项来改变文件的所属用户及所属组。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=55"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mygroup files* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=bin files* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=1 files* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("11 files* /mydir/\n")])])]),s("h3",{attrs:{id:"add-更高级的复制文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add-更高级的复制文件"}},[t._v("#")]),t._v(" ADD(更高级的复制文件)")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("ADD")]),t._v(" 指令和 "),s("code",[t._v("COPY")]),t._v(" 的格式和性质基本一致。但是在 "),s("code",[t._v("COPY")]),t._v(" 基础上增加了一些功能。")]),t._v(" "),s("p",[t._v("比如 "),s("code",[t._v("<源路径>")]),t._v(" 可以是一个 "),s("code",[t._v("URL")]),t._v("，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 "),s("code",[t._v("<目标路径>")]),t._v("去。下载后的文件权限自动设置为 "),s("code",[t._v("600")]),t._v("，如果这并不是想要的权限，那么还需要增加额外的一层 "),s("code",[t._v("RUN")]),t._v(" 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 "),s("code",[t._v("RUN")]),t._v(" 指令进行解压缩。所以不如直接使用 "),s("code",[t._v("RUN")]),t._v(" 指令，然后使用 "),s("code",[t._v("wget")]),t._v(" 或者 "),s("code",[t._v("curl")]),t._v(" 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("<源路径>")]),t._v(" 为一个 "),s("code",[t._v("tar")]),t._v(" 压缩文件的话，压缩格式为 "),s("code",[t._v("gzip")]),t._v(", "),s("code",[t._v("bzip2")]),t._v(" 以及 "),s("code",[t._v("xz")]),t._v(" 的情况下，"),s("code",[t._v("ADD")]),t._v(" 指令将会自动解压缩这个压缩文件到 "),s("code",[t._v("<目标路径>")]),t._v(" 去。")])]),t._v(" "),s("p",[t._v("在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 "),s("code",[t._v("ubuntu")]),t._v(" 中：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" scratch\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xenial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cloudimg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("amd64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("root.tar.gz /\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),s("p",[t._v("但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 "),s("code",[t._v("ADD")]),t._v(" 命令了。")]),t._v(" "),s("p",[t._v("在 Docker 官方的 "),s("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/appendix/best_practices.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile 最佳实践文档"),s("OutboundLink")],1),t._v(" 中要求，尽可能的使用 "),s("code",[t._v("COPY")]),t._v("，因为 "),s("code",[t._v("COPY")]),t._v(" 的语义很明确，就是复制文件而已，而 "),s("code",[t._v("ADD")]),t._v(" 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 "),s("code",[t._v("ADD")]),t._v(" 的场合，就是所提及的需要自动解压缩的场合。")]),t._v(" "),s("p",[t._v("另外需要注意的是，"),s("code",[t._v("ADD")]),t._v(" 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。")]),t._v(" "),s("p",[t._v("因此在 "),s("code",[t._v("COPY")]),t._v(" 和 "),s("code",[t._v("ADD")]),t._v(" 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 "),s("code",[t._v("COPY")]),t._v(" 指令，仅在需要自动解压缩的场合使用 "),s("code",[t._v("ADD")]),t._v("。")]),t._v(" "),s("p",[t._v("在使用该指令的时候还可以加上 "),s("code",[t._v("--chown=<user>:<group>")]),t._v(" 选项来改变文件的所属用户及所属组。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=55"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mygroup files* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=bin files* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=1 files* /mydir/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("chown=10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("11 files* /mydir/\n")])])]),s("h3",{attrs:{id:"cmd-容器启动命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd-容器启动命令"}},[t._v("#")]),t._v(" CMD(容器启动命令)")]),t._v(" "),s("blockquote",[s("p",[t._v("之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。"),s("code",[t._v("CMD")]),t._v(" 指令就是用于指定默认的容器主进程的启动命令的。")])]),t._v(" "),s("p",[s("code",[t._v("CMD")]),t._v(" 指令的格式和 "),s("code",[t._v("RUN")]),t._v(" 相似，也是两种格式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("shell")]),t._v(" 格式："),s("code",[t._v("CMD <命令>")])]),t._v(" "),s("li",[s("code",[t._v("exec")]),t._v(" 格式："),s("code",[t._v('CMD ["可执行文件", "参数1", "参数2"...]')])]),t._v(" "),s("li",[t._v("参数列表格式："),s("code",[t._v('CMD ["参数1", "参数2"...]')]),t._v("。在指定了 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 指令后，用 "),s("code",[t._v("CMD")]),t._v(" 指定具体的参数。")])]),t._v(" "),s("p",[t._v("在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，"),s("code",[t._v("ubuntu")]),t._v(" 镜像默认的 "),s("code",[t._v("CMD")]),t._v(" 是 "),s("code",[t._v("/bin/bash")]),t._v("，如果我们直接 "),s("code",[t._v("docker run -it ubuntu")]),t._v(" 的话，会直接进入 "),s("code",[t._v("bash")]),t._v("。我们也可以在运行时指定运行别的命令，如 "),s("code",[t._v("docker run -it ubuntu cat /etc/os-release")]),t._v("。这就是用 "),s("code",[t._v("cat /etc/os-release")]),t._v(" 命令替换了默认的 "),s("code",[t._v("/bin/bash")]),t._v(" 命令了，输出了系统版本信息。")]),t._v(" "),s("p",[t._v("在指令格式上，一般推荐使用 "),s("code",[t._v("exec")]),t._v(" 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 "),s("code",[t._v('"')]),t._v("，而不要使用单引号。")]),t._v(" "),s("p",[t._v("如果使用 "),s("code",[t._v("shell")]),t._v(" 格式的话，实际的命令会被包装为 "),s("code",[t._v("sh -c")]),t._v(" 的参数的形式进行执行。比如：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" echo $HOME\n")])])]),s("p",[t._v("在实际执行中，会将其变更为：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo $HOME"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。")]),t._v(" "),s("p",[t._v("提到 "),s("code",[t._v("CMD")]),t._v(" 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。")]),t._v(" "),s("p",[t._v("Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。")]),t._v(" "),s("p",[t._v("一些初学者将 "),s("code",[t._v("CMD")]),t._v(" 写为：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" service nginx start\n")])])]),s("p",[t._v("然后发现容器执行后就立即退出了。甚至在容器内去使用 "),s("code",[t._v("systemctl")]),t._v(" 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。")]),t._v(" "),s("p",[t._v("对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。")]),t._v(" "),s("p",[t._v("而使用 "),s("code",[t._v("service nginx start")]),t._v(" 命令，则是希望 upstart 来以后台守护进程形式启动 "),s("code",[t._v("nginx")]),t._v(" 服务。而刚才说了 "),s("code",[t._v("CMD service nginx start")]),t._v(" 会被理解为 "),s("code",[t._v('CMD [ "sh", "-c", "service nginx start"]')]),t._v("，因此主进程实际上是 "),s("code",[t._v("sh")]),t._v("。那么当 "),s("code",[t._v("service nginx start")]),t._v(" 命令结束后，"),s("code",[t._v("sh")]),t._v(" 也就结束了，"),s("code",[t._v("sh")]),t._v(" 作为主进程退出了，自然就会令容器退出。")]),t._v(" "),s("p",[t._v("正确的做法是直接执行 "),s("code",[t._v("nginx")]),t._v(" 可执行文件，并且要求以前台形式运行。比如：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-g"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"daemon off;"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"entrypoint-入口点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-入口点"}},[t._v("#")]),t._v(" ENTRYPOINT(入口点)")]),t._v(" "),s("p",[s("code",[t._v("ENTRYPOINT")]),t._v(" 的格式和 "),s("code",[t._v("RUN")]),t._v(" 指令格式一样，分为 "),s("code",[t._v("exec")]),t._v(" 格式和 "),s("code",[t._v("shell")]),t._v(" 格式。")]),t._v(" "),s("p",[s("code",[t._v("ENTRYPOINT")]),t._v(" 的目的和 "),s("code",[t._v("CMD")]),t._v(" 一样，都是在指定容器启动程序及参数。"),s("code",[t._v("ENTRYPOINT")]),t._v(" 在运行时也可以替代，不过比 "),s("code",[t._v("CMD")]),t._v(" 要略显繁琐，需要通过 "),s("code",[t._v("docker run")]),t._v(" 的参数 "),s("code",[t._v("--entrypoint")]),t._v(" 来指定。")]),t._v(" "),s("p",[t._v("当指定了 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 后，"),s("code",[t._v("CMD")]),t._v(" 的含义就发生了改变，不再是直接的运行其命令，而是将 "),s("code",[t._v("CMD")]),t._v(" 的内容作为参数传给 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 指令，换句话说实际执行时，将变为：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ENTRYPOINT"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<CMD>"')]),t._v("\n")])])]),s("p",[t._v("那么有了 "),s("code",[t._v("CMD")]),t._v(" 后，为什么还要有 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 呢？这种 "),s("code",[t._v('<ENTRYPOINT> "<CMD>"')]),t._v(" 有什么好处么？让我们来看几个场景。")]),t._v(" "),s("h4",{attrs:{id:"场景一：让镜像变成像命令一样使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景一：让镜像变成像命令一样使用"}},[t._v("#")]),t._v(" 场景一：让镜像变成像命令一样使用")]),t._v(" "),s("p",[t._v("假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 "),s("code",[t._v("CMD")]),t._v(" 来实现：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("18.04\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get update \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y curl \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf /var/lib/apt/lists/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"curl"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://ip.cn"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("假如我们使用 "),s("code",[t._v("docker build -t myip .")]),t._v(" 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n")])])]),s("p",[t._v("嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 "),s("code",[t._v("CMD")]),t._v(" 中可以看到实质的命令是 "),s("code",[t._v("curl")]),t._v("，那么如果我们希望显示 HTTP 头信息，就需要加上 "),s("code",[t._v("-i")]),t._v(" 参数。那么我们可以直接加 "),s("code",[t._v("-i")]),t._v(" 参数给 "),s("code",[t._v("docker run myip")]),t._v(" 么？")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run myip -i\ndocker: Error response from daemon: invalid header field value "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oci runtime error: container_linux.go:247: starting container process caused '),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("exec: "),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("-i"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[t._v("\\\\")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(": executable file not found in "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("我们可以看到可执行文件找不到的报错，"),s("code",[t._v("executable file not found")]),t._v("。之前我们说过，跟在镜像名后面的是 "),s("code",[t._v("command")]),t._v("，运行时会替换 "),s("code",[t._v("CMD")]),t._v(" 的默认值。因此这里的 "),s("code",[t._v("-i")]),t._v(" 替换了原来的 "),s("code",[t._v("CMD")]),t._v("，而不是添加在原来的 "),s("code",[t._v("curl -s https://ip.cn")]),t._v(" 后面。而 "),s("code",[t._v("-i")]),t._v(" 根本不是命令，所以自然找不到。")]),t._v(" "),s("p",[t._v("那么如果我们希望加入 "),s("code",[t._v("-i")]),t._v(" 这参数，我们就必须重新完整的输入这个命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run myip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s https://ip.cn -i\n")])])]),s("p",[t._v("这显然不是很好的解决方案，而使用 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 就可以解决这个问题。现在我们重新用 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 来实现这个镜像：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("18.04\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get update \\\n    && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y curl \\\n    && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf /var/lib/apt/lists/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"curl"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://ip.cn"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这次我们再来尝试直接使用 "),s("code",[t._v("docker run myip -i")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n\n$ docker run myip -i\nHTTP/1.1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK\nServer: nginx/1.8.0\nDate: Tue, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" Nov "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2016")]),t._v(" 05:12:40 GMT\nContent-Type: text/html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" cache-2:80, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" proxy-2_6:8006\nConnection: keep-alive\n\n当前 IP：61.148.226.66 来自：北京市 联通\n")])])]),s("p",[t._v("可以看到，这次成功了。这是因为当存在 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 后，"),s("code",[t._v("CMD")]),t._v(" 的内容将会作为参数传给 "),s("code",[t._v("ENTRYPOINT")]),t._v("，而这里 "),s("code",[t._v("-i")]),t._v(" 就是新的 "),s("code",[t._v("CMD")]),t._v("，因此会作为参数传给 "),s("code",[t._v("curl")]),t._v("，从而达到了我们预期的效果。")]),t._v(" "),s("h4",{attrs:{id:"场景二：应用运行前的准备工作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景二：应用运行前的准备工作"}},[t._v("#")]),t._v(" 场景二：应用运行前的准备工作")]),t._v(" "),s("p",[t._v("启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。")]),t._v(" "),s("p",[t._v("比如 "),s("code",[t._v("mysql")]),t._v(" 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。")]),t._v(" "),s("p",[t._v("此外，可能希望避免使用 "),s("code",[t._v("root")]),t._v(" 用户去启动服务，从而提高安全性，而在启动服务前还需要以 "),s("code",[t._v("root")]),t._v(" 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 "),s("code",[t._v("root")]),t._v(" 身份执行，方便调试等。")]),t._v(" "),s("p",[t._v("这些准备工作是和容器 "),s("code",[t._v("CMD")]),t._v(" 无关的，无论 "),s("code",[t._v("CMD")]),t._v(" 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 中去执行，而这个脚本会将接到的参数（也就是 "),s("code",[t._v("<CMD>")]),t._v("）作为命令，在脚本最后执行。比如官方镜像 "),s("code",[t._v("redis")]),t._v(" 中就是这么做的：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" alpine"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("3.4\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" addgroup "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("S redis && adduser "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("S "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("G redis redis\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint.sh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 6379\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis-server"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 为 "),s("code",[t._v("docker-entrypoint.sh")]),t._v(" 脚本。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/sh")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# allow the container to be started with `--user`")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redis-server'")]),t._v(" -a "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("chown")]),t._v(" -R redis "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" su-exec redis "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v('"')]),t._v("\n")])])]),s("p",[t._v("该脚本的内容就是根据 "),s("code",[t._v("CMD")]),t._v(" 的内容来判断，如果是 "),s("code",[t._v("redis-server")]),t._v(" 的话，则切换到 "),s("code",[t._v("redis")]),t._v(" 用户身份启动服务器，否则依旧使用 "),s("code",[t._v("root")]),t._v(" 身份执行。比如：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run -it redis "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("uid")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("gid")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("groups")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"env-设置环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env-设置环境变量"}},[t._v("#")]),t._v(" ENV(设置环境变量)")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("ENV")]),t._v(" 指令用于设置环境变量。无论是后面的其它指令，如 "),s("code",[t._v("RUN")]),t._v("，还是运行时的应用，都可以直接使用这里定义的环境变量。")])]),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ENV <key> <value>")])]),t._v(" "),s("li",[s("code",[t._v("ENV <key1>=<value1> <key2>=<value2>...")])])]),t._v(" "),s("p",[t._v("示例 1：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" VERSION=1.0 DEBUG=on \\\n    NAME="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Happy Feet"')]),t._v("\n")])])]),s("p",[t._v("这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。")]),t._v(" "),s("p",[t._v("示例 2：")]),t._v(" "),s("p",[t._v("定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 "),s("code",[t._v("node")]),t._v(" 镜像 "),s("code",[t._v("Dockerfile")]),t._v(" 中，就有类似这样的代码：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_VERSION 7.2.0\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SLO "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"')]),t._v(" \\\n  && curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("SLO "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"')]),t._v(" \\\n  && gpg "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("batch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("decrypt "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" node-v$NODE_VERSION-linux-x64.tar.xz\\$"')]),t._v(" SHASUMS256.txt "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" sha256sum "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" \\\n  && tar "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("xJf "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("C /usr/local "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("strip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("components=1 \\\n  && rm "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node-v$NODE_VERSION-linux-x64.tar.xz"')]),t._v(" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("s /usr/local/bin/node /usr/local/bin/nodejs\n")])])]),s("p",[t._v("在这里先定义了环境变量 "),s("code",[t._v("NODE_VERSION")]),t._v("，其后的 "),s("code",[t._v("RUN")]),t._v(" 这层里，多次使用 "),s("code",[t._v("$NODE_VERSION")]),t._v(" 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 "),s("code",[t._v("7.2.0")]),t._v(" 即可，"),s("code",[t._v("Dockerfile")]),t._v(" 构建维护变得更轻松了。")]),t._v(" "),s("p",[t._v("下列指令可以支持环境变量展开： "),s("code",[t._v("ADD")]),t._v("、"),s("code",[t._v("COPY")]),t._v("、"),s("code",[t._v("ENV")]),t._v("、"),s("code",[t._v("EXPOSE")]),t._v("、"),s("code",[t._v("LABEL")]),t._v("、"),s("code",[t._v("USER")]),t._v("、"),s("code",[t._v("WORKDIR")]),t._v("、"),s("code",[t._v("VOLUME")]),t._v("、"),s("code",[t._v("STOPSIGNAL")]),t._v("、"),s("code",[t._v("ONBUILD")]),t._v("。")]),t._v(" "),s("p",[t._v("可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 "),s("code",[t._v("Dockerfile")]),t._v(" 制作更多的镜像，只需使用不同的环境变量即可。")]),t._v(" "),s("h3",{attrs:{id:"arg-构建参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-构建参数"}},[t._v("#")]),t._v(" ARG(构建参数)")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("Dockerfile")]),t._v(" 中的 "),s("code",[t._v("ARG")]),t._v(" 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 "),s("code",[t._v("docker build")]),t._v(" 中用 "),s("code",[t._v("--build-arg <参数名>=<值>")]),t._v(" 来覆盖。")]),t._v(" "),s("p",[t._v("构建参数和 "),s("code",[t._v("ENV")]),t._v(" 的效果一样，都是设置环境变量。所不同的是，"),s("code",[t._v("ARG")]),t._v(" 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 "),s("code",[t._v("ARG")]),t._v(" 保存密码之类的信息，因为 "),s("code",[t._v("docker history")]),t._v(" 还是可以看到所有值的。")])]),t._v(" "),s("p",[t._v("格式："),s("code",[t._v("ARG <参数名>[=<默认值>]")])]),t._v(" "),s("p",[t._v("在 1.13 之前的版本，要求 "),s("code",[t._v("--build-arg")]),t._v(" 中的参数名，必须在 "),s("code",[t._v("Dockerfile")]),t._v(" 中用 "),s("code",[t._v("ARG")]),t._v(" 定义过了，换句话说，就是 "),s("code",[t._v("--build-arg")]),t._v(" 指定的参数，必须在 "),s("code",[t._v("Dockerfile")]),t._v(" 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 "),s("code",[t._v("Dockerfile")]),t._v(" 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。")]),t._v(" "),s("h3",{attrs:{id:"volume-定义匿名卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volume-定义匿名卷"}},[t._v("#")]),t._v(" VOLUME(定义匿名卷)")]),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('VOLUME ["<路径1>", "<路径2>"...]')])]),t._v(" "),s("li",[s("code",[t._v("VOLUME <路径>")])])]),t._v(" "),s("p",[t._v("之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 "),s("code",[t._v("Dockerfile")]),t._v(" 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VOLUME")]),t._v(" /data\n")])])]),s("p",[t._v("这里的 "),s("code",[t._v("/data")]),t._v(" 目录就会在运行时自动挂载为匿名卷，任何向 "),s("code",[t._v("/data")]),t._v(" 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[t._v("docker run "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("d "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("v mydata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/data xxxx\n")])])]),s("p",[t._v("在这行命令中，就使用了 "),s("code",[t._v("mydata")]),t._v(" 这个命名卷挂载到了 "),s("code",[t._v("/data")]),t._v(" 这个位置，替代了 "),s("code",[t._v("Dockerfile")]),t._v(" 中定义的匿名卷的挂载配置。")]),t._v(" "),s("h3",{attrs:{id:"expose-暴露端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expose-暴露端口"}},[t._v("#")]),t._v(" EXPOSE(暴露端口)")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("EXPOSE")]),t._v(" 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 "),s("code",[t._v("docker run -P")]),t._v(" 时，会自动随机映射 "),s("code",[t._v("EXPOSE")]),t._v(" 的端口。")]),t._v(" "),s("p",[t._v("要将 "),s("code",[t._v("EXPOSE")]),t._v(" 和在运行时使用 "),s("code",[t._v("-p <宿主端口>:<容器端口>")]),t._v(" 区分开来。"),s("code",[t._v("-p")]),t._v("，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 "),s("code",[t._v("EXPOSE")]),t._v(" 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。")])]),t._v(" "),s("p",[t._v("格式："),s("code",[t._v("EXPOSE <端口1> [<端口2>...]")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"workdir-指定工作目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workdir-指定工作目录"}},[t._v("#")]),t._v(" WORKDIR(指定工作目录)")]),t._v(" "),s("blockquote",[s("p",[t._v("使用 "),s("code",[t._v("WORKDIR")]),t._v(" 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，"),s("code",[t._v("WORKDIR")]),t._v(" 会帮你建立目录。")])]),t._v(" "),s("p",[t._v("格式："),s("code",[t._v("WORKDIR <工作目录路径>")]),t._v("。")]),t._v(" "),s("p",[t._v("示例 1：")]),t._v(" "),s("p",[t._v("之前提到一些初学者常犯的错误是把 "),s("code",[t._v("Dockerfile")]),t._v(" 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" cd /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" world.txt\n")])])]),s("p",[t._v("如果将这个 "),s("code",[t._v("Dockerfile")]),t._v(" 进行构建镜像运行后，会发现找不到 "),s("code",[t._v("/app/world.txt")]),t._v(" 文件，或者其内容不是 "),s("code",[t._v("hello")]),t._v("。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 "),s("code",[t._v("Dockerfile")]),t._v(" 中，这两行 "),s("code",[t._v("RUN")]),t._v(" 命令的执行环境根本不同，是两个完全不同的容器。这就是对 "),s("code",[t._v("Dockerfile")]),t._v(" 构建分层存储的概念不了解所导致的错误。")]),t._v(" "),s("p",[t._v("之前说过每一个 "),s("code",[t._v("RUN")]),t._v(" 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 "),s("code",[t._v("RUN cd /app")]),t._v(" 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。")]),t._v(" "),s("p",[t._v("因此如果需要改变以后各层的工作目录的位置，那么应该使用 "),s("code",[t._v("WORKDIR")]),t._v(" 指令。")]),t._v(" "),s("h3",{attrs:{id:"label"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#label"}},[t._v("#")]),t._v(" LABEL")]),t._v(" "),s("p",[s("code",[t._v("LABEL")]),t._v("用于为镜像添加元数据，元数以键值对的形式指定：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("LABEL <key>=<value> <key>=<value> <key>=<value> ...\n")])])]),s("p",[t._v("使用"),s("code",[t._v("LABEL")]),t._v("指定元数据时，一条"),s("code",[t._v("LABEL")]),t._v("指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条"),s("code",[t._v("LABEL")]),t._v("指令指定，以免生成过多的中间镜像。")]),t._v(" "),s("p",[t._v("如，通过"),s("code",[t._v("LABEL")]),t._v("指定一些元数据：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('LABEL version="1.0" description="这是一个Web服务器" by="IT笔录"\n')])])]),s("p",[t._v("指定后可以通过"),s("code",[t._v("docker inspect")]),t._v("查看：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$sudo docker inspect itbilu/test\n"Labels": {\n    "version": "1.0",\n    "description": "这是一个Web服务器",\n    "by": "IT笔录"\n},\n')])])]),s("p",[s("em",[t._v("注意；")]),s("code",[t._v("Dockerfile")]),t._v("中还有个"),s("code",[t._v("MAINTAINER")]),t._v("命令，该命令用于指定镜像作者。但"),s("code",[t._v("MAINTAINER")]),t._v("并不推荐使用，更推荐使用"),s("code",[t._v("LABEL")]),t._v("来指定镜像作者。如：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('LABEL maintainer="itbilu.com"\n')])])]),s("h3",{attrs:{id:"user-指定当前用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#user-指定当前用户"}},[t._v("#")]),t._v(" USER(指定当前用户)")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("USER")]),t._v(" 指令和 "),s("code",[t._v("WORKDIR")]),t._v(" 相似，都是改变环境状态并影响以后的层。"),s("code",[t._v("WORKDIR")]),t._v(" 是改变工作目录，"),s("code",[t._v("USER")]),t._v(" 则是改变之后层的执行 "),s("code",[t._v("RUN")]),t._v(", "),s("code",[t._v("CMD")]),t._v(" 以及 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 这类命令的身份。")]),t._v(" "),s("p",[t._v("当然，和 "),s("code",[t._v("WORKDIR")]),t._v(" 一样，"),s("code",[t._v("USER")]),t._v(" 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。")])]),t._v(" "),s("p",[t._v("格式："),s("code",[t._v("USER <用户名>[:<用户组>]")])]),t._v(" "),s("p",[t._v("示例 1：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" groupadd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r redis && useradd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("g redis redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USER")]),t._v(" redis\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis-server"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("如果以 "),s("code",[t._v("root")]),t._v(" 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 "),s("code",[t._v("su")]),t._v("或者 "),s("code",[t._v("sudo")]),t._v("，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 "),s("a",{attrs:{href:"https://github.com/tianon/gosu",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("gosu")]),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立 redis 用户，并使用 gosu 换另一个用户执行命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" groupadd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r redis && useradd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("g redis redis\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 下载 gosu")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" wget "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("O /usr/local/bin/gosu "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"')]),t._v(" \\\n    && chmod +x /usr/local/bin/gosu \\\n    && gosu nobody true\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 CMD，并以另外的用户执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exec"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gosu"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis-server"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"healthcheck-健康检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck-健康检查"}},[t._v("#")]),t._v(" HEALTHCHECK(健康检查)")]),t._v(" "),s("p",[t._v("格式：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HEALTHCHECK [选项] CMD <命令>")]),t._v("：设置检查容器健康状况的命令")]),t._v(" "),s("li",[s("code",[t._v("HEALTHCHECK NONE")]),t._v("：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令")])]),t._v(" "),s("p",[s("code",[t._v("HEALTHCHECK")]),t._v(" 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。")]),t._v(" "),s("p",[t._v("在没有 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。")]),t._v(" "),s("p",[t._v("而自 1.12 之后，Docker 提供了 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。")]),t._v(" "),s("p",[t._v("当在一个镜像指定了 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 指令后，用其启动容器，初始状态会为 "),s("code",[t._v("starting")]),t._v("，在 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 指令检查成功后变为 "),s("code",[t._v("healthy")]),t._v("，如果连续一定次数失败，则会变为 "),s("code",[t._v("unhealthy")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("HEALTHCHECK")]),t._v(" 支持下列选项：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("--interval=<间隔>")]),t._v("：两次健康检查的间隔，默认为 30 秒；")]),t._v(" "),s("li",[s("code",[t._v("--timeout=<时长>")]),t._v("：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；")]),t._v(" "),s("li",[s("code",[t._v("--retries=<次数>")]),t._v("：当连续失败指定次数后，则将容器状态视为 "),s("code",[t._v("unhealthy")]),t._v("，默认 3 次。")])]),t._v(" "),s("p",[t._v("和 "),s("code",[t._v("CMD")]),t._v(", "),s("code",[t._v("ENTRYPOINT")]),t._v(" 一样，"),s("code",[t._v("HEALTHCHECK")]),t._v(" 只可以出现一次，如果写了多个，只有最后一个生效。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("HEALTHCHECK [选项] CMD")]),t._v(" 后面的命令，格式和 "),s("code",[t._v("ENTRYPOINT")]),t._v(" 一样，分为 "),s("code",[t._v("shell")]),t._v(" 格式，和 "),s("code",[t._v("exec")]),t._v(" 格式。命令的返回值决定了该次健康检查的成功与否："),s("code",[t._v("0")]),t._v("：成功；"),s("code",[t._v("1")]),t._v("：失败；"),s("code",[t._v("2")]),t._v("：保留，不要使用这个值。")]),t._v(" "),s("p",[t._v("假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 "),s("code",[t._v("curl")]),t._v(" 来帮助判断，其 "),s("code",[t._v("Dockerfile")]),t._v(" 的 "),s("code",[t._v("HEALTHCHECK")]),t._v(" 可以这么写：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" nginx\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get update && apt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("get install "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y curl && rm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf /var/lib/apt/lists/*\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HEALTHCHECK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("interval=5s "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("timeout=3s \\\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" curl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("fs http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" exit 1\n")])])]),s("p",[t._v("这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 "),s("code",[t._v("curl -fs http://localhost/ || exit 1")]),t._v(" 作为健康检查命令。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("docker build")]),t._v(" 来构建这个镜像：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker build -t myweb:v1 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("构建好了后，我们启动一个容器：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run -d --name web -p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 myweb:v1\n")])])]),s("p",[t._v("当运行该镜像后，可以通过 "),s("code",[t._v("docker container ls")]),t._v(" 看到最初的状态为 "),s("code",[t._v("(health: starting)")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx -g \'daemon off"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" seconds ago       Up "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" seconds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("health: starting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("/tcp     web\n")])])]),s("p",[t._v("在等待几秒钟后，再次 "),s("code",[t._v("docker container ls")]),t._v("，就会看到健康状态变化为了 "),s("code",[t._v("(healthy)")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker container "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES\n03e28eb00bd0        myweb:v1            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx -g \'daemon off"')]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" seconds ago      Up "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" seconds "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("healthy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("/tcp, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("/tcp     web\n")])])]),s("p",[t._v("如果健康检查连续失败超过了重试次数，状态就会变为 "),s("code",[t._v("(unhealthy)")]),t._v("。")]),t._v(" "),s("p",[t._v("为了帮助排障，健康检查命令的输出（包括 "),s("code",[t._v("stdout")]),t._v(" 以及 "),s("code",[t._v("stderr")]),t._v("）都会被存储于健康状态里，可以用 "),s("code",[t._v("docker inspect")]),t._v(" 来查看。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker inspect --format "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{{json .State.Health}}'")]),t._v(" web "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" python -m json.tool\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FailingStreak"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Log"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"End"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-11-25T14:35:37.940957051Z"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ExitCode"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Output"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<!DOCTYPE html>'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<html>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<head>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<title>Welcome to nginx!</title>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<style>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("    body {"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("        width: 35em;"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("        margin: 0 auto;"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("        font-family: Tahoma, Verdana, Arial, sans-serif;"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("    }"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("</style>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("</head>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<body>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<h1>Welcome to nginx!</h1>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<p>If you see this page, the nginx web server is successfully installed and"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("working. Further configuration is required.</p>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<p>For online documentation and support please refer to"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<a href="),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("http://nginx.org/"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(">nginx.org</a>.<br/>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("Commercial support is available at"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<a href="),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("http://nginx.com/"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v(">nginx.com</a>.</p>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("<p><em>Thank you for using nginx.</em></p>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("</body>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("</html>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Start"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-11-25T14:35:37.780192565Z"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Status"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"healthy"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"onbuild-为他人作嫁衣裳"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#onbuild-为他人作嫁衣裳"}},[t._v("#")]),t._v(" ONBUILD(为他人作嫁衣裳)")]),t._v(" "),s("p",[t._v("格式："),s("code",[t._v("ONBUILD <其它指令>")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("ONBUILD")]),t._v(" 是一个特殊的指令，它后面跟的是其它指令，比如 "),s("code",[t._v("RUN")]),t._v(", "),s("code",[t._v("COPY")]),t._v(" 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。")]),t._v(" "),s("p",[s("code",[t._v("Dockerfile")]),t._v(" 中的其它指令都是为了定制当前镜像而准备的，唯有 "),s("code",[t._v("ONBUILD")]),t._v(" 是为了帮助别人定制自己而准备的。")]),t._v(" "),s("p",[t._v("假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 "),s("code",[t._v("npm")]),t._v(" 进行包管理，所有依赖、配置、启动信息等会放到 "),s("code",[t._v("package.json")]),t._v(" 文件里。在拿到程序代码后，需要先进行 "),s("code",[t._v("npm install")]),t._v(" 才可以获得所有需要的依赖。然后就可以通过 "),s("code",[t._v("npm start")]),t._v("来启动应用。因此，一般来说会这样写 "),s("code",[t._v("Dockerfile")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("slim\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./package.json /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"install"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . /app/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("把这个 "),s("code",[t._v("Dockerfile")]),t._v(" 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 "),s("code",[t._v("Dockerfile")]),t._v(" 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。")]),t._v(" "),s("p",[t._v("如果第一个 Node.js 项目在开发过程中，发现这个 "),s("code",[t._v("Dockerfile")]),t._v(" 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 "),s("code",[t._v("Dockerfile")]),t._v("，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 "),s("code",[t._v("Dockerfile")]),t._v(" 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 "),s("code",[t._v("Dockerfile")]),t._v("，而第二个项目的 "),s("code",[t._v("Dockerfile")]),t._v(" 就会被自动修复。")]),t._v(" "),s("p",[t._v("那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 "),s("code",[t._v("Dockerfile")]),t._v("的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 "),s("code",[t._v("Dockerfile")]),t._v(" 就会变为：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("slim\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 "),s("code",[t._v("my-node")]),t._v(" 的话，各个项目内的自己的 "),s("code",[t._v("Dockerfile")]),t._v(" 就变为：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("node\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./package.json /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"install"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . /app/\n")])])]),s("p",[t._v("基础镜像变化后，各个项目都用这个 "),s("code",[t._v("Dockerfile")]),t._v(" 重新构建镜像，会继承基础镜像的更新。")]),t._v(" "),s("p",[t._v("那么，问题解决了么？没有。准确说，只解决了一半。如果这个 "),s("code",[t._v("Dockerfile")]),t._v(" 里面有些东西需要调整呢？比如 "),s("code",[t._v("npm install")]),t._v(" 都需要加一些参数，那怎么办？这一行 "),s("code",[t._v("RUN")]),t._v(" 是不可能放入基础镜像的，因为涉及到了当前项目的 "),s("code",[t._v("./package.json")]),t._v("，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 "),s("code",[t._v("Dockerfile")]),t._v(" 的前 4 条指令的变化问题，而后面三条指令的变化则完全没办法处理。")]),t._v(" "),s("p",[s("code",[t._v("ONBUILD")]),t._v(" 可以解决这个问题。让我们用 "),s("code",[t._v("ONBUILD")]),t._v(" 重新写一下基础镜像的 "),s("code",[t._v("Dockerfile")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("slim\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ONBUILD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" ./package.json /app\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ONBUILD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"install"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ONBUILD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . /app/\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这次我们回到原始的 "),s("code",[t._v("Dockerfile")]),t._v("，但是这次将项目相关的指令加上 "),s("code",[t._v("ONBUILD")]),t._v("，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 "),s("code",[t._v("Dockerfile")]),t._v(" 就变成了简单地：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" my"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("node\n")])])]),s("p",[t._v("是的，只有这么一行。当在各个项目目录中，用这个只有一行的 "),s("code",[t._v("Dockerfile")]),t._v(" 构建镜像时，之前基础镜像的那三行 "),s("code",[t._v("ONBUILD")]),t._v(" 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 "),s("code",[t._v("npm install")]),t._v("，生成应用镜像。")]),t._v(" "),s("h2",{attrs:{id:"二、最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、最佳实践"}},[t._v("#")]),t._v(" 二、最佳实践")]),t._v(" "),s("p",[t._v("有任何的问题或建议，欢迎给我留言 😆")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfie 官方文档"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Best practices for writing Dockerfiles"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/docker-library/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 官方镜像 Dockerfile"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://yeasy.gitbooks.io/docker_practice/content/image/dockerfile/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile 指令详解"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);